{"version":3,"sources":["utils.js"],"names":[],"mappingsfile":"base.js","sourcesContent":["(function utils($) {\n    /**\n     * Splits and normalizes the given url into hostname, pathname, query string\n     * and fragment.\n     *\n     * @param string url\n     * @return Object Null or an object with structure as follows:\n     * {\n     *     hostname,\n     *     pathname,\n     *     queryString,\n     *     fragment\n     * }\n     */\n    $.parseURL = function (url) {\n        var urlRegex = /^(?:https?:\\/\\/)?([A-Za-z0-9.-]+\\.[A-Za-z]+)?(\\/?[^?#\\s]+)?(?:\\?([^#]+)?)?(?:#(.*))?$/;\n        var matches = url.match(urlRegex);\n        if (!matches) {\n            return null;\n        }\n\n        var parts = {\n            hostname: matches[1] ? matches[1] : window.location.hostname,\n            pathname: matches[2] ? matches[2] : window.location.pathname,\n            queryString: matches[3] ? matches[3] : '',\n            fragment: matches[4] ? matches[4] : ''\n        };\n\n        // Process relative pathnames\n        if (parts.pathname[0] !== '/')\n        {\n            // Append current pathname to the specified pathname\n            var prefix = window.location.pathname;\n            prefix = prefix[prefix.length - 1] === '/' ? prefix : (prefix+'/');\n            parts.pathname = prefix + parts.pathname;\n        }\n\n        // Make sure pathname ends with a '/'\n        if (parts.pathname[parts.pathname.length - 1] !== '/')\n        {\n            parts.pathname += '/';\n        }\n\n        return parts;\n    };\n\n    /**\n     * Scrolls window to the put given element on top of the page.\n     *\n     * @param jQueryCollection $el\n     * @param int duration\n     */\n    $.scrollWindowTo = function ($el, duration, easing, callback, respectHeader) {\n        duration = typeof(duration) !== 'number' ? 1000 : duration;\n        easing = typeof(easing) !== 'string' || easing === '' ? 'swing' : easing;\n        callback = typeof(callback) !== 'function' ? (function () {}) : callback;\n        respectHeader = typeof(respectHeader) === 'boolean' ? respectHeader : true;\n\n        $('html, body').animate({\n            scrollTop: $el.offset().top - (respectHeader ? $('.js-site-header').outerHeight() : 0)\n        }, duration, easing, callback);\n    };\n\n    /**\n     * Checks if email address is valid. Regex is taken from:\n     * http://jsfiddle.net/ghvj4gy9/embedded/result,js/ as pointed by:\n     * http://stackoverflow.com/a/46181\n     */\n    $.validateEmail = function (email) {\n        var emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return emailRegex.test(email);\n    };\n\n    /**\n     * Formats filesize to be displayed on front-end\n     *\n     * @param numeric size File size in bytes. This has to be numeric.\n     * @return string\n     */\n    $.formatFileSize = function (size) {\n        var size = parseInt(size);\n        var sizeText = '';\n        var sizeUnit = '';\n\n        if ( isNaN(size) ) {\n            throw 'Size must be integer';\n        } else {\n            if (size < 1000) { // < ~1KB\n                sizeText = size;\n                sizeUnit = 'B';\n            } else if (size < 1024*1000) { // < ~1MB\n                sizeText = (size / 1024).toFixed(2);\n                sizeUnit = 'KB';\n            } else if (size < 1024*1024*1000) { // < ~1GB\n                sizeText = (size / (1024*1024)).toFixed(2);\n                sizeUnit = 'MB';\n            } else {\n                sizeText = (size / (1024*1024*1024)).toFixed(2);\n                sizeUnit = 'GB';\n            }\n        }\n\n        return sizeText + sizeUnit;\n    };\n\n    /**\n     * Returns a function, that, as long as it continues to be invoked, will not\n     * be triggered. The function will be called after it stops being called for\n     * N milliseconds. If `immediate` is passed, trigger the function on the\n     * leading edge, instead of the trailing.\n     *\n     * Taken from https://davidwalsh.name/javascript-debounce-function which\n     * took it from underscore.js (http://underscorejs.org/#debounce)\n     */\n    $.debounce = function (func, wait, immediate) {\n        var timeout;\n        return function() {\n            var context = this, args = arguments;\n            var later = function() {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            var callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    };\n})(jQuery);\n"],"sourceRoot":"/source/"}