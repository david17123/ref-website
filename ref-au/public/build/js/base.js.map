{"version":3,"sources":["utils.js","header.js","footer.js"],"names":[],"mappingszDA","file":"base.js","sourcesContent":["(function utils($) {\n    /**\n     * Splits and normalizes the given url into hostname, pathname, query string\n     * and fragment.\n     *\n     * @param string url\n     * @return Object Null or an object with structure as follows:\n     * {\n     *     hostname,\n     *     pathname,\n     *     queryString,\n     *     fragment\n     * }\n     */\n    $.parseURL = function (url) {\n        var urlRegex = /^(?:https?:\\/\\/)?([A-Za-z0-9.-]+\\.[A-Za-z]+)?(\\/?[^?#\\s]+)?(?:\\?([^#]+)?)?(?:#(.*))?$/;\n        var matches = url.match(urlRegex);\n        if (!matches) {\n            return null;\n        }\n\n        var parts = {\n            hostname: matches[1] ? matches[1] : window.location.hostname,\n            pathname: matches[2] ? matches[2] : window.location.pathname,\n            queryString: matches[3] ? matches[3] : '',\n            fragment: matches[4] ? matches[4] : ''\n        };\n\n        // Process relative pathnames\n        if (parts.pathname[0] !== '/')\n        {\n            // Append current pathname to the specified pathname\n            var prefix = window.location.pathname;\n            prefix = prefix[prefix.length - 1] === '/' ? prefix : (prefix+'/');\n            parts.pathname = prefix + parts.pathname;\n        }\n\n        // Make sure pathname ends with a '/'\n        if (parts.pathname[parts.pathname.length - 1] !== '/')\n        {\n            parts.pathname += '/';\n        }\n\n        return parts;\n    };\n\n    /**\n     * Scrolls window to the put given element on top of the page.\n     *\n     * @param jQueryCollection $el\n     * @param int duration\n     */\n    $.scrollWindowTo = function ($el, duration, easing, callback) {\n        duration = typeof(duration) !== 'number' ? 1000 : duration;\n        easing = typeof(easing) !== 'string' || easing === '' ? 'swing' : easing;\n        callback = typeof(callback) !== 'function' ? (function () {}) : callback;\n\n        $('html, body').animate({\n            scrollTop: $el.offset().top\n        }, duration, easing, callback);\n    };\n})(jQuery);\n","(function header($) {\n    $(document).ready(function () {\n        /**\n         * Updates the style of header based on scroll position\n         */\n        var updateStyle = function () {\n            var $header = $('.js-site-header');\n            var scrollTop = $('body').scrollTop();\n            var headerHeight = $header.height();\n\n            if (scrollTop >= headerHeight)\n            {\n                $header.addClass('site-header--opaque');\n            }\n            else\n            {\n                $header.removeClass('site-header--opaque');\n            }\n        };\n\n        // Universities header link\n        $('.js-site-header-link').click(function (e) {\n            var targetURL = $(this).attr('href');\n            var urlParts = $.parseURL(targetURL);\n            if (!urlParts)\n            {\n                return;\n            }\n\n            // Check if link refers to the current page\n            var currentURLParts = $.parseURL(window.location.href);\n            var samePage = urlParts.hostname === currentURLParts.hostname &&\n                           urlParts.pathname === currentURLParts.pathname &&\n                           urlParts.queryString === currentURLParts.queryString;\n            if (samePage && urlParts.fragment !== '')\n            {\n                // Scroll to hash if reference is found on page\n                var $scrollTo = $('#'+urlParts.fragment);\n                if ($scrollTo.length === 1)\n                {\n                    $.scrollWindowTo($scrollTo, 500, 'swing', function () {\n                        window.location.hash = urlParts.fragment;\n                    });\n                    e.preventDefault();\n                }\n            }\n        });\n\n        // Header on scroll\n        $(document).on('scroll', function () {\n            updateStyle();\n        });\n\n        // Init\n        updateStyle();\n    });\n})(jQuery);\n",""],"sourceRoot":"/source/"}